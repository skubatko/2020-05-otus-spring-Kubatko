/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.skubatko.dev.otus.spring.hw28;

import ru.skubatko.dev.otus.spring.hw28.domain.BarberItem;
import ru.skubatko.dev.otus.spring.hw28.domain.Beauty;
import ru.skubatko.dev.otus.spring.hw28.enums.BarberItemType;
import ru.skubatko.dev.otus.spring.hw28.gateway.BarberShop;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.integration.annotation.IntegrationComponentScan;
import org.springframework.integration.config.EnableIntegration;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

@Slf4j
@ComponentScan
@EnableIntegration
@IntegrationComponentScan
public class App {
    private static final Random GENERATOR = new Random();

    @SneakyThrows
    public static void main(String[] args) {
        ConfigurableApplicationContext ctx = SpringApplication.run(App.class, args);
        BarberShop barberShop = ctx.getBean(BarberShop.class);

        for (int i = 0; i < 8; i++) {
            Thread.sleep(1000);

            Collection<BarberItem> items = buildItems();
            log.info("main() - info: services requested = {}",
                    items.stream().map(BarberItem::getContent).map(BarberItemType::name).collect(Collectors.joining(", ")));

            Collection<Beauty> beauty = barberShop.process(items);
            log.info("main() - info: beauty completed = {}",
                    beauty.stream().map(Beauty::getItem).collect(Collectors.joining(", ")));
        }

        ctx.close();
    }

    private static BarberItem buildItem() {
        return new BarberItem(BarberItemType.values()[GENERATOR.nextInt(BarberItemType.values().length)]);
    }

    private static Collection<BarberItem> buildItems() {
        List<BarberItem> items = new ArrayList<>();
        for (int i = 0; i < GENERATOR.nextInt(3) + 1; i++) {
            items.add(buildItem());
        }
        return items;
    }
}
